diff --git a/exec.go b/exec.go
index 82adb808..92489d69 100644
--- a/exec.go
+++ b/exec.go
@@ -97,6 +97,7 @@ following will output a list of processes running in the container:
 		},
 	},
 	Action: func(context *cli.Context) error {
+		return fmt.Errorf("RunQ does not support 'docker exec'. Use 'runq-exec' instead.")
 		if err := checkArgs(context, 1, minArgs); err != nil {
 			return err
 		}
diff --git a/main.go b/main.go
index 4d666382..41ff7ece 100644
--- a/main.go
+++ b/main.go
@@ -114,6 +114,62 @@ func main() {
 			Value: "auto",
 			Usage: "ignore cgroup permission errors ('true', 'false', or 'auto')",
 		},
+		cli.IntFlag{
+			Name:  "cpu",
+			Value: 1,
+			Usage: "default number of CPUs of guest VM",
+		},
+		cli.IntFlag{
+			Name:  "mem",
+			Value: 64,
+			Usage: "default RAM size of guest VM in MiB",
+		},
+		cli.StringFlag{
+			Name:  "dns",
+			Value: "",
+			Usage: "comma-separated list of DNS servers",
+		},
+		cli.StringFlag{
+			Name:  "dns-opts",
+			Value: "",
+			Usage: "DNS options to use",
+		},
+		cli.StringFlag{
+			Name:  "dns-search",
+			Value: "",
+			Usage: "DNS search domains to use",
+		},
+		cli.BoolFlag{
+			Name:  "dns-preserve",
+			Usage: "disable generation of resolv.conf",
+		},
+		cli.BoolFlag{
+			Name:  "nestedvm",
+			Usage: "enable support for nested VMs",
+		},
+		cli.StringFlag{
+			Name:  "tmpfs",
+			Value: "",
+			Usage: "default tmpfs directories",
+		},
+		cli.BoolFlag{
+			Name:  "noexec",
+			Usage: "disable runq exec",
+		},
+		cli.BoolFlag{
+			Name:  "runqenv",
+			Usage: "enable writing of /.runqenv",
+		},
+		cli.StringFlag{
+			Name:  "9pcache",
+			Value: "mmap",
+			Usage: "cache mode for 9p (none|loose|fscache|mmap)",
+		},
+		cli.StringFlag{
+			Name:  "cpuargs",
+			Value: "host",
+			Usage: "comma-separated list of cpu model and feature selection",
+		},
 	}
 	app.Commands = []cli.Command{
 		checkpointCommand,
diff --git a/runq.go b/runq.go
new file mode 100644
index 00000000..c033e960
--- /dev/null
+++ b/runq.go
@@ -0,0 +1,575 @@
+package main
+
+import (
+	"bufio"
+	"fmt"
+	"io/ioutil"
+	"math/rand"
+	"os"
+	"path/filepath"
+	"regexp"
+	"strconv"
+	"strings"
+	"syscall"
+	"time"
+
+	"github.com/urfave/cli"
+
+	"github.com/gotoz/runq/pkg/vm"
+	specs "github.com/opencontainers/runtime-spec/specs-go"
+	"github.com/vishvananda/netlink"
+)
+
+const (
+	runqOciVersion = "1."
+	runqStartcmd   = vm.QemuMountPt + "/proxy"
+)
+
+var runqCommit = "" // set via Makefile
+
+// ProxyCapabilities same as OCI defaults plus CAP_NET_ADMIN and CAP_SYS_ADMIN
+var proxyCapabilities = []string{
+	"CAP_AUDIT_WRITE",
+	"CAP_CHOWN",
+	"CAP_DAC_OVERRIDE",
+	"CAP_FOWNER",
+	"CAP_FSETID",
+	"CAP_KILL",
+	"CAP_MKNOD",
+	"CAP_NET_BIND_SERVICE",
+	"CAP_NET_RAW",
+	"CAP_SETFCAP",
+	"CAP_SETGID",
+	"CAP_SETPCAP",
+	"CAP_SETUID",
+	"CAP_SYS_CHROOT",
+	"CAP_NET_ADMIN",
+	"CAP_SYS_ADMIN",
+}
+
+var reUUID = regexp.MustCompile("^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[8|9|aA|bB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$")
+
+func init() {
+	rand.Seed(time.Now().UnixNano())
+}
+
+// turnToRunq turns runc into runq.
+func turnToRunq(context *cli.Context, spec *specs.Spec) error {
+	if !strings.HasPrefix(spec.Version, runqOciVersion) {
+		return fmt.Errorf("unsupported spec (%s), need %s.x", spec.Version, runqOciVersion)
+	}
+
+	// Check if running in privileged mode.
+	if len(spec.Linux.MaskedPaths) == 0 {
+		return fmt.Errorf("privileged mode is not supported")
+	}
+	for _, d := range spec.Linux.Devices {
+		if d.Path == "/dev/mem" {
+			return fmt.Errorf("privileged mode is not supported")
+		}
+	}
+
+	//
+	// Linux
+	//
+	dns := vm.DNS{
+		Options:  strings.TrimSpace(context.GlobalString("dns-opts")),
+		Search:   strings.TrimSpace(context.GlobalString("dns-search")),
+		Preserve: context.GlobalBool("dns-preserve"),
+	}
+	for _, v := range strings.Split(context.GlobalString("dns"), ",") {
+		v = strings.TrimSpace(v)
+		if v == "" {
+			continue
+		}
+		dns.Server = append(dns.Server, v)
+	}
+
+	vmdata := vm.Data{
+		ContainerID: strings.TrimSpace((context.Args()[0] + strings.Repeat(" ", 12))[:12]),
+		CPU:         context.GlobalInt("cpu"),
+		CPUArgs:     strings.Trim(strings.ReplaceAll(context.GlobalString("cpuargs"), " ", ""), ","),
+		DNS:         dns,
+		GitCommit:   runqCommit,
+		Mem:         context.GlobalInt("mem"),
+		NestedVM:    context.GlobalBool("nestedvm"),
+		NoExec:      context.GlobalBool("noexec"),
+		Sysctl:      spec.Linux.Sysctl,
+	}
+
+	spec.Linux.Sysctl = nil
+
+	if err := specDevices(spec, &vmdata); err != nil {
+		return err
+	}
+
+	if err := specMounts(context, spec, &vmdata); err != nil {
+		return err
+	}
+
+	//
+	// Entrypoint
+	//
+	vmdata.Entrypoint = vm.Entrypoint{
+		Args:            spec.Process.Args,
+		Cwd:             spec.Process.Cwd,
+		NoNewPrivileges: spec.Process.NoNewPrivileges,
+		Runqenv:         context.GlobalBool("runqenv"),
+		Terminal:        spec.Process.Terminal,
+	}
+
+	spec.Process.ApparmorProfile = ""
+	spec.Process.SelinuxLabel = ""
+	spec.Process.Env = append(spec.Process.Env, "RUNQ_COMMIT="+runqCommit)
+
+	vmdata.Entrypoint.Capabilities = vm.AppCapabilities{
+		Ambient:     spec.Process.Capabilities.Ambient,
+		Bounding:    spec.Process.Capabilities.Bounding,
+		Effective:   spec.Process.Capabilities.Effective,
+		Inheritable: spec.Process.Capabilities.Inheritable,
+		Permitted:   spec.Process.Capabilities.Permitted,
+	}
+
+	// Capabilities for proxy process
+	spec.Process.Capabilities.Ambient = proxyCapabilities
+	spec.Process.Capabilities.Bounding = proxyCapabilities
+	spec.Process.Capabilities.Effective = proxyCapabilities
+	spec.Process.Capabilities.Inheritable = proxyCapabilities
+	spec.Process.Capabilities.Permitted = proxyCapabilities
+
+	// Transform Seccomp value (type *specs.LinuxSeccomp) into a Gob
+	// so we don't have to translate it into a vm type first.
+	// This is save as long as we build against a fixed OCI release.
+	// We have to do this anyway. (See Gopkg.toml)
+	if spec.Linux.Seccomp != nil {
+		gob, err := vm.Encode(*spec.Linux.Seccomp)
+		if err != nil {
+			return err
+		}
+		vmdata.Entrypoint.SeccompGob = gob
+		spec.Linux.Seccomp = nil
+	}
+
+	vmdata.Entrypoint.Rlimits = make(map[string]syscall.Rlimit)
+	for _, v := range spec.Process.Rlimits {
+		vmdata.Entrypoint.Rlimits[v.Type] = syscall.Rlimit{Max: v.Hard, Cur: v.Soft}
+	}
+	spec.Process.Rlimits = nil
+
+	//
+	// User
+	//
+	vmdata.Entrypoint.User = vm.User{
+		UID:            spec.Process.User.UID,
+		GID:            spec.Process.User.GID,
+		AdditionalGids: spec.Process.User.AdditionalGids,
+	}
+
+	//
+	// 9p cache mode
+	//
+	if mode := strings.TrimSpace(context.GlobalString("9pcache")); mode != "" {
+		switch mode {
+		case "none", "loose", "fscache", "mmap":
+			vmdata.Cache9p = mode
+		default:
+			return fmt.Errorf("invalid 9p cache mode %q, want (none|loose|fscache|mmap)", mode)
+		}
+	}
+
+	spec.Process.User.UID = 0
+	spec.Process.User.GID = 0
+	spec.Process.User.AdditionalGids = nil
+
+	vmdataB64, err := vm.ZipEncodeBase64(vmdata)
+	if err != nil {
+		return fmt.Errorf("vm.Encode(vmdata): %v", err)
+	}
+	spec.Process.Args = []string{runqStartcmd, "-name", vmdata.ContainerID, vmdataB64}
+
+	return validateProcessSpec(spec.Process)
+}
+
+func specDevices(spec *specs.Spec, vmdata *vm.Data) error {
+	iPtr := func(i int64) *int64 { return &i }
+	filemode := os.FileMode(0600)
+	id := uint32(0)
+
+	// /dev/tap*
+	major, err := macvtapMajor()
+	if err != nil {
+		return err
+	}
+	if major == 0 {
+		return fmt.Errorf("can't get major device number of macvtap device")
+	}
+	spec.Linux.Resources.Devices = append(spec.Linux.Resources.Devices, specs.LinuxDeviceCgroup{
+		Allow: true, Type: "c", Major: iPtr(major), Access: "rwm",
+	})
+
+	// /dev/kvm
+	spec.Linux.Resources.Devices = append(spec.Linux.Resources.Devices, specs.LinuxDeviceCgroup{
+		Allow: true, Type: "c", Major: iPtr(10), Minor: iPtr(232), Access: "rwm",
+	})
+	spec.Linux.Devices = append(spec.Linux.Devices, specs.LinuxDevice{
+		Path:     "/dev/kvm",
+		Type:     "c",
+		Major:    10,
+		Minor:    232,
+		FileMode: &filemode,
+		UID:      &id,
+		GID:      &id,
+	})
+
+	// /dev/vhost-net
+	spec.Linux.Resources.Devices = append(spec.Linux.Resources.Devices, specs.LinuxDeviceCgroup{
+		Allow: true, Type: "c", Major: iPtr(10), Minor: iPtr(238), Access: "rwm",
+	})
+	spec.Linux.Devices = append(spec.Linux.Devices, specs.LinuxDevice{
+		Path:     "/dev/vhost-net",
+		Type:     "c",
+		Major:    10,
+		Minor:    238,
+		FileMode: &filemode,
+		UID:      &id,
+		GID:      &id,
+	})
+
+	// /dev/vsock
+	major, minor, err := majorMinor("/sys/class/misc/vsock/dev")
+	if err != nil {
+		if _, ok := err.(*os.PathError); ok {
+			return fmt.Errorf("Can't access vsock decvice. Is kernel module 'vhost_vsock' loaded?")
+		}
+		return err
+	}
+	if major == 0 || minor == 0 {
+		return fmt.Errorf("can't get vsock major/minor device numbers")
+	}
+	spec.Linux.Resources.Devices = append(spec.Linux.Resources.Devices, specs.LinuxDeviceCgroup{
+		Allow: true, Type: "c", Major: iPtr(major), Minor: iPtr(minor), Access: "rwm",
+	})
+	spec.Linux.Devices = append(spec.Linux.Devices, specs.LinuxDevice{
+		Path:     "/dev/vsock",
+		Type:     "c",
+		Major:    major,
+		Minor:    minor,
+		FileMode: &filemode,
+		UID:      &id,
+		GID:      &id,
+	})
+
+	// /dev/vhost-vsock
+	major, minor, err = majorMinor("/sys/class/misc/vhost-vsock/dev")
+	if err != nil {
+		return err
+	}
+	if major == 0 {
+		return fmt.Errorf("can't get vhost-vsock major/minor device number")
+	}
+	spec.Linux.Resources.Devices = append(spec.Linux.Resources.Devices, specs.LinuxDeviceCgroup{
+		Allow: true, Type: "c", Major: iPtr(major), Minor: iPtr(minor), Access: "rwm",
+	})
+	spec.Linux.Devices = append(spec.Linux.Devices, specs.LinuxDevice{
+		Path:     "/dev/vhost-vsock",
+		Type:     "c",
+		Major:    major,
+		Minor:    minor,
+		FileMode: &filemode,
+		UID:      &id,
+		GID:      &id,
+	})
+
+	// /dev/vfio
+	for i, v := range spec.Process.Env {
+		if strings.HasPrefix(v, "RUNQ_APUUID=") {
+			uuid := strings.SplitN(v, "=", 2)[1]
+			if !reUUID.MatchString(uuid) {
+				return fmt.Errorf("%q: invalid UUID", v)
+			}
+			spec.Process.Env = append(spec.Process.Env[:i], spec.Process.Env[i+1:]...)
+
+			// /dev/vfio/vfio
+			devnode := "/dev/vfio/vfio"
+			major, minor, err := majorMinor("/sys/class/misc/vfio/dev")
+			if err != nil {
+				return err
+			}
+			if major == 0 {
+				return fmt.Errorf("can't get major/minor number of %s", devnode)
+			}
+
+			spec.Linux.Resources.Devices = append(spec.Linux.Resources.Devices, specs.LinuxDeviceCgroup{
+				Allow: true, Type: "c", Major: iPtr(major), Minor: iPtr(minor), Access: "rwm",
+			})
+			spec.Linux.Devices = append(spec.Linux.Devices, specs.LinuxDevice{
+				Path:     devnode,
+				Type:     "c",
+				Major:    major,
+				Minor:    minor,
+				FileMode: &filemode,
+				UID:      &id,
+				GID:      &id,
+			})
+
+			// /dev/vfio/<nr>
+			devpath := "/sys/devices/vfio_ap/matrix/" + uuid
+			vmdata.APDevice = devpath
+
+			s, err := os.Readlink(devpath + "/iommu_group")
+			if err != nil {
+				return err
+			}
+			nr := filepath.Base(s)
+			devnode = "/dev/vfio/" + nr
+			major, minor, err = majorMinor(fmt.Sprintf("/sys/devices/virtual/vfio/%s/dev", nr))
+			if err != nil {
+				return err
+			}
+			if major == 0 {
+				return fmt.Errorf("can't get major/minor number of %s", devnode)
+			}
+
+			spec.Linux.Resources.Devices = append(spec.Linux.Resources.Devices, specs.LinuxDeviceCgroup{
+				Allow: true, Type: "c", Major: iPtr(major), Minor: iPtr(minor), Access: "rwm",
+			})
+			spec.Linux.Devices = append(spec.Linux.Devices, specs.LinuxDevice{
+				Path:     devnode,
+				Type:     "c",
+				Major:    major,
+				Minor:    minor,
+				FileMode: &filemode,
+				UID:      &id,
+				GID:      &id,
+			})
+
+			break
+		}
+	}
+
+	// loop devices are needed for root disks (raw disks)
+	for _, v := range spec.Process.Env {
+		if strings.HasPrefix(v, "RUNQ_ROOTDISK=") {
+			// /dev/loop-control
+			spec.Linux.Resources.Devices = append(spec.Linux.Resources.Devices, specs.LinuxDeviceCgroup{
+				Allow: true, Type: "c", Major: iPtr(10), Minor: iPtr(237), Access: "rwm",
+			})
+			spec.Linux.Devices = append(spec.Linux.Devices, specs.LinuxDevice{
+				Path:     "/dev/loop-control",
+				Type:     "c",
+				Major:    10,
+				Minor:    237,
+				FileMode: &filemode,
+				UID:      &id,
+				GID:      &id,
+			})
+
+			// /dev/loop*
+			spec.Linux.Resources.Devices = append(spec.Linux.Resources.Devices, specs.LinuxDeviceCgroup{
+				Allow: true, Type: "b", Major: iPtr(7), Access: "rwm",
+			})
+			break
+		}
+	}
+
+	// /dev/runq/...
+	for _, d := range spec.Linux.Devices {
+		if d.Type == "b" {
+			if strings.HasPrefix(d.Path, "/dev/runq/") {
+				vmdata.Disks = append(vmdata.Disks, vm.Disk{Path: d.Path, Type: vm.BlockDevice})
+			} else {
+				return fmt.Errorf("invalid path: %s", d.Path)
+			}
+		}
+	}
+
+	return nil
+}
+
+func specMounts(context *cli.Context, spec *specs.Spec, vmdata *vm.Data) error {
+	var mounts []specs.Mount
+	tmpfs := make(map[string]bool)
+
+	for _, m := range spec.Mounts {
+		// Ignore invalid mounts.
+		if strings.HasPrefix(m.Destination, vm.QemuMountPt) {
+			return fmt.Errorf("invalid mount point: %s", m.Destination)
+		}
+		if m.Type == "tmpfs" {
+			if m.Destination == "/dev" {
+				mounts = append(mounts, m)
+			} else {
+				flags, data := parseTmfpsMount(m)
+				vmdata.Mounts = append(vmdata.Mounts, vm.Mount{
+					Source: "tmpfs",
+					Target: m.Destination,
+					Fstype: "tmpfs",
+					Flags:  flags,
+					Data:   data,
+				})
+				tmpfs[m.Destination] = true
+			}
+			continue
+		}
+
+		if strings.HasPrefix(m.Destination, "/dev/runq/") {
+			vmdata.Disks = append(vmdata.Disks, vm.Disk{Path: m.Destination, Type: vm.DisktypeUnknown})
+		}
+		mounts = append(mounts, m)
+	}
+
+	for _, d := range strings.Split(strings.TrimSpace(context.GlobalString("tmpfs")), ",") {
+		if d == "" || tmpfs[d] {
+			continue
+		}
+		vmdata.Mounts = append(vmdata.Mounts, vm.Mount{
+			Source: "tmpfs",
+			Target: d,
+			Fstype: "tmpfs",
+			Flags:  syscall.MS_NODEV | syscall.MS_NOSUID,
+			Data:   "",
+		})
+	}
+
+	// Bind-mount Qemu root directory to every VM.
+	mounts = append(mounts, specs.Mount{
+		Destination: vm.QemuMountPt,
+		Type:        "bind",
+		Source:      filepath.Join(filepath.Dir(os.Args[0]), "qemu"),
+		Options:     []string{"rbind", "nosuid", "nodev", "ro", "rprivate"},
+	})
+
+	spec.Mounts = mounts
+
+	return nil
+}
+
+func parseTmfpsMount(m specs.Mount) (int, string) {
+	var dataArray []string
+	var flags int
+	for _, o := range m.Options {
+		switch o {
+		case "default":
+		case "noatime":
+			flags |= syscall.MS_NOATIME
+		case "atime":
+			flags &^= syscall.MS_NOATIME
+		case "nodiratime":
+			flags |= syscall.MS_NODIRATIME
+		case "diratime":
+			flags &^= syscall.MS_NODIRATIME
+		case "nodev":
+			flags |= syscall.MS_NODEV
+		case "dev":
+			flags &^= syscall.MS_NODEV
+		case "noexec":
+			flags |= syscall.MS_NOEXEC
+		case "exec":
+			flags &^= syscall.MS_NOEXEC
+		case "nosuid":
+			flags |= syscall.MS_NOSUID
+		case "suid":
+			flags &^= syscall.MS_NOSUID
+		case "strictatime":
+			flags |= syscall.MS_STRICTATIME
+		case "nostrictatime":
+			flags &^= syscall.MS_STRICTATIME
+		case "ro":
+			flags |= syscall.MS_RDONLY
+		case "rw":
+			flags &^= syscall.MS_RDONLY
+		case "rprivate", "rshared", "rslave", "runbindable":
+		default:
+			dataArray = append(dataArray, o)
+		}
+	}
+	data := strings.Join(dataArray, ",")
+	return flags, data
+}
+
+// macvtapMajor tries to figure out the dynamic device number of the
+// macvtap driver. It creates a dummy macvtap device to force
+// loading of the macvtap kernel modules.
+func macvtapMajor() (int64, error) {
+	major, err := parseProcDevice("macvtap")
+	if err != nil {
+		return 0, err
+	}
+	if major != 0 {
+		return major, nil
+	}
+
+	links, err := netlink.LinkList()
+	if err != nil {
+		return 0, fmt.Errorf("LinkList: %v", err)
+	}
+
+	for _, link := range links {
+		if link.Type() == "bridge" {
+			la := netlink.NewLinkAttrs()
+			la.Name = fmt.Sprintf("tap%d", rand.Int31())
+			la.ParentIndex = link.Attrs().Index
+			mvt := &netlink.Macvtap{
+				Macvlan: netlink.Macvlan{
+					LinkAttrs: la,
+					Mode:      netlink.MACVLAN_MODE_BRIDGE,
+				},
+			}
+			if err := netlink.LinkAdd(mvt); err != nil {
+				return 0, fmt.Errorf("LinkAdd: %v", err)
+			}
+
+			mvtLink, err := netlink.LinkByName(la.Name)
+			if err != nil {
+				return 0, fmt.Errorf("LinkByName: %v", err)
+			}
+			if err := netlink.LinkDel(mvtLink); err != nil {
+				return 0, fmt.Errorf("LinkDel: %v", err)
+			}
+			break
+		}
+	}
+	return parseProcDevice("macvtap")
+}
+
+func parseProcDevice(name string) (int64, error) {
+	fd, err := os.Open("/proc/devices")
+	if err != nil {
+		return 0, err
+	}
+	defer fd.Close()
+
+	scanner := bufio.NewScanner(fd)
+
+	var major int64
+	for scanner.Scan() {
+		s := strings.Fields(scanner.Text())
+		if len(s) > 1 {
+			if s[1] == name {
+				major, err = strconv.ParseInt(s[0], 10, 64)
+				if err != nil {
+					return 0, fmt.Errorf("Atoi %s: %v", s[0], err)
+				}
+				break
+			}
+		}
+	}
+	return major, scanner.Err()
+}
+
+// majorMinor returns major and minor device number for a given syspath.
+func majorMinor(syspath string) (int64, int64, error) {
+	// cat /sys/class/misc/vsock/dev
+	// 10:52
+	buf, err := ioutil.ReadFile(syspath)
+	if err != nil {
+		return 0, 0, err
+	}
+	s := strings.Split(strings.TrimSpace(string(buf)), ":")
+	major, err := strconv.ParseInt(s[0], 10, 64)
+	if err != nil {
+		return 0, 0, err
+	}
+	minor, err := strconv.ParseInt(s[1], 10, 64)
+	return major, minor, err
+}
diff --git a/utils.go b/utils.go
index 32ab33e5..ea83a520 100644
--- a/utils.go
+++ b/utils.go
@@ -78,6 +78,9 @@ func setupSpec(context *cli.Context) (*specs.Spec, error) {
 	if err != nil {
 		return nil, err
 	}
+	if err := turnToRunq(context, spec); err != nil {
+		return nil, err
+	}
 	return spec, nil
 }
 
